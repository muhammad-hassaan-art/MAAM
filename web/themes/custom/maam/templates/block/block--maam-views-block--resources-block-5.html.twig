{#
/**
 * @file
 * Default theme implementation to display a block.
 *
 * Available variables:
 * - plugin_id: The ID of the block implementation.
 * - label: The configured label of the block if visible.
 * - configuration: A list of the block's configuration values.
 *   - label: The configured label for the block.
 *   - label_display: The display settings for the label.
 *   - provider: The module or other provider that provided this block plugin.
 *   - Block plugin specific settings will also be stored here.
 * - content: The content of this block.
 * - attributes: array of HTML attributes populated by modules, intended to
 *   be added to the main container tag of this template.
 *   - id: A valid HTML ID and guaranteed unique.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main content
 *   tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 *
 * @see template_preprocess_block()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'block',
    'block-' ~ configuration.provider|clean_class,
    'block-' ~ plugin_id|clean_class,
  ]
%}
<div{{ attributes.addClass(classes) }}>
  {{ title_prefix }}
  {% if label %}
    <h2{{ title_attributes }}>{{ label }}</h2>
  {% endif %}
  {{ title_suffix }}
  {% block content %}
    <div{{ content_attributes.addClass('content') }}>
      {{ content }}
    </div>
  {% endblock %}
</div>

<script>
 document.addEventListener("DOMContentLoaded", function () {
      var anchorTag1 = document.getElementById('edit-field-resource-type-target-id-all');
        // Check if the anchor tag exists
        if (anchorTag1) {
          // Update the text content
          anchorTag1.textContent = 'All';
        }
        removeDuplicateRows("resources-row", "h2");
    });
     // Select the target node using the class selector
    var targetNode = document.getElementById('block-maam-views-block-resources-block-5');
    if (!targetNode) {
      console.error('Target element not found. Make sure it exists on the page.');
    } else {
      // Create an observer instance
      var observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          // Handle the mutation here
          removeDuplicateRows("resources-row", "h2");
        });
      });
      // Configuration of the observer
      var config = { childList: true, subtree: true };
      // Start observing the target node for configured mutations
      observer.observe(targetNode, config);
      // You can later disconnect the observer if needed
      // observer.disconnect();
    }
    function removeDuplicateRows(rowClassName, headingTagName) {
        var rows = document.querySelectorAll("." + rowClassName);
        var uniqueHeadings = {};
        rows.forEach(function (row) {
            var heading = row.querySelector(headingTagName).textContent.trim();
            if (!uniqueHeadings[heading]) {
                uniqueHeadings[heading] = true;
            } else {
                row.remove(); // Remove duplicate row
            }
        });
       
    }

</script>